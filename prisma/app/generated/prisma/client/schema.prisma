// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique @db.VarChar(255)
  isVerified        Boolean           @default(false)
  verifyToken       String?           @unique
  password          String
  name              String            @db.VarChar(100)
  username          String            @unique @db.VarChar(30)
  profileImageUrl   String            @default("https://uxxggsabskosuakbqpji.supabase.co/storage/v1/object/public/profile-images/profile-images/profiles/default.png")
  friendOf          Friendship[]      @relation("friendOf")
  friends           Friendship[]      @relation("user")
  groups            UserOnGroup[]
  books             UserOnBook[]
  goals             Goal[]
  notes             Note[]
  posts             Post[]
  categories        Category[]
  achievements      UserAchievement[]
  userStreak        UserStreak?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Friendship {
  friendOf User             @relation("friendOf", fields: [friendId], references: [id])
  friendId String
  user     User             @relation("user", fields: [userId], references: [id])
  userId   String
  status   FriendshipStatus @default(PENDING)

  @@id(name: "id", [friendId, userId])
}

model Book {
  id            String       @id @default(uuid())
  olWorkId      String
  olBookId      String?
  cover         String
  title         String       @db.VarChar(255)
  authors       String[]     @db.VarChar(100)
  description   String       @db.Text
  publishers    String[]     @db.VarChar(100)
  publishDate   String       @db.VarChar(20)
  numberOfPages String
  users         UserOnBook[]
}

model UserOnBook {
  book           Book                 @relation(fields: [bookId], references: [id])
  bookId         String
  user           User                 @relation(fields: [userId], references: [id])
  userId         String
  notes          Note[]
  bookCategories BookCategoryOnBook[]
  status         BookStatus           @default(LENDO)
  currentPage    Int                  @default(0)
  totalPages     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookId, userId])
}

model Note {
  id               String     @id @default(uuid())
  title            String     @db.VarChar(100)
  body             String     @db.Text
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  userOnBook       UserOnBook @relation(fields: [userOnBookBookId, userOnBookUserId], references: [bookId, userId], onDelete: Cascade)
  userOnBookBookId String
  userOnBookUserId String
  category         Category   @relation(fields: [categoryId], references: [id])
  categoryId       String

  @@unique([title, categoryId, userOnBookBookId])
}

model BookCategoryOnBook {
  category         Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       String
  userOnBook       UserOnBook @relation(fields: [userOnBookBookId, userOnBookUserId], references: [bookId, userId], onDelete: Cascade)
  userOnBookBookId String
  userOnBookUserId String

  @@id([categoryId, userOnBookBookId, userOnBookUserId])
}

model Category {
  id     String               @id @default(uuid())
  name   String               @db.VarChar(50)
  type   CategoryType
  user   User                 @relation(fields: [userId], references: [id])
  userId String
  notes  Note[]
  books  BookCategoryOnBook[]
  goals  Goal[]

  @@unique([name, userId, type])
}

model Goal {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(100)
  description String     @db.Text
  type        TypeGoal
  category    Category[]
  progress    Int        @default(0)
  objective   Int
  endsAt      DateTime
  createdAt   DateTime   @default(now())
  status      GoalStatus @default(ONGOING)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
}

model Achievement {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(100)
  description String            @db.VarChar(255)
  type        AchievementType
  threshold   Int
  iconPath    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserAchievement[]

  @@unique([type, threshold])
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  progress      Int         @default(0)
  unlocked      Boolean     @default(false)
  unlockedAt    DateTime?

  @@id([userId, achievementId])
}

model UserStreak {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  current    Int      @default(0)
  max        Int      @default(0)
  completed7 Int      @default(0)
  lastReadAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Group {
  id            String        @id @unique @default(uuid())
  name          String        @unique @db.VarChar(100)
  description   String        @db.VarChar(500)
  groupImageUrl String        @default("https://uxxggsabskosuakbqpji.supabase.co/storage/v1/object/public/group-images/group-images/groups/default.jpg")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  users         UserOnGroup[]
  posts         Post[]
  goals         Goal[]
}

model UserOnGroup {
  group                  Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId                String
  user                   User       @relation(fields: [userId], references: [id])
  userId                 String
  type                   TypeMember @default(PENDING)
  pointsAccumulatedPages Int        @default(0)
  pointsAccumulatedBooks Int        @default(0)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  @@id([groupId, userId])
}

model Post {
  id        String   @id @unique @default(uuid())
  title     String   @db.VarChar(150)
  body      String   @db.Text
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookStatus {
  LENDO
  PLANEJO_LER
  COMPLETO
  EM_ESPERA
  RELENDO
  ABANDONADO
}

enum CategoryType {
  NOTE
  BOOK
}

enum TypeGoal {
  PAGES
  BOOKS
}

enum TypeMember {
  CREATOR
  ADMIN
  MEMBER
  PENDING
}

enum FriendshipStatus {
  PENDING
  FRIEND
}

enum GoalStatus {
  ONGOING
  COMPLETED
  EXPIRED
}

enum AchievementType {
  PAGES_READ
  BOOKS_COMPLETED
  DIVERSE_CATEGORIES
  GOALS_COMPLETED
  MAX_STREAK_WEEKS
}
